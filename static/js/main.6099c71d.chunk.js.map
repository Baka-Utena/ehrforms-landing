{"version":3,"sources":["Textfield.js","Form.js","Modal.js","MenuItem.js","ButtonShowModal.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["TextField","name","onChange","onBlur","placeholder","required","error","className","classNames","type","Form","props","state","fields","email","phone","errors","field","e","this","target","value","setState","fieldName","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","preventDefault","handleValidation","console","log","classes","onSubmit","contactSubmit","bind","handleChange","Component","Modal","onClose","show","onClick","MenuItem","anchorTarget","handleClick","window","scrollTo","top","itemPosition","left","behavior","block","document","getElementById","itemName","active","href","aria-label","itemTitle","ButtonShowModal","visible","Header","handleResize","handleScroll","menuToggle","sections","product","how","features","contact","activeMenuItem","positions","windowWidth","menuVisible","innerWidth","getAnchorPoints","curScroll","pageYOffset","documentElement","scrollTop","headerHeight","querySelector","offsetHeight","newPos","key","getBoundingClientRect","curPos","scrollY","curSection","newMenuState","addEventListener","removeEventListener","menuItems","push","handleClickOnLogo","closeModal","App","showModal","scrollFirstScreen","scrollFirstScreenDetection","id","React","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6099c71d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nfunction TextField({name, onChange, onBlur, placeholder, required, error}) {\r\n    return (\r\n        <>\r\n            <div className={classNames(\"textfield\", {'is-required': required})}>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"textfield__input\"\r\n                    name={name}\r\n                    placeholder={placeholder}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}/>\r\n                    {/*<div className=\"textfield__placeholder\">{placeholder}</div>*/}\r\n                    <div className=\"textfield__error\">{error}</div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TextField;\r\n","import React, {Component} from \"react\";\r\nimport TextField from \"./Textfield\";\r\nimport classNames from \"classnames\";\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fields: {\r\n                name: '',\r\n                email: '',\r\n                phone: ''\r\n            },\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({fields});\r\n    }\r\n\r\n    fieldValidation(fieldName, e) {\r\n        let fields = this.state.fields;\r\n        fields[fieldName] = e.target.value;\r\n        let errors = {};\r\n\r\n        if (!fields[fieldName]) {\r\n            errors[fieldName] = \"Cannot be empty\";\r\n        }\r\n\r\n        this.setState({errors, fields});\r\n        /*\r\n                switch (field) {\r\n                    case \"name\":\r\n                        if (!fields[\"name\"]) {\r\n                            errors[\"name\"] = \"Cannot be empty\";\r\n                            this.setState({errors: errors});\r\n                        }\r\n                        if (typeof fields[\"name\"] !== \"undefined\") {\r\n                            if (!fields[\"name\"].match(/^[a-zA-Z]+$/)) {\r\n                                errors[\"name\"] = \"Only letters\";\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }*/\r\n\r\n    }\r\n\r\n    handleValidation() {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        if (!fields[\"name\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n            this.setState({errors: errors});\r\n\r\n        } else if (typeof fields[\"name\"] !== \"undefined\") {\r\n            if (!fields[\"name\"].match(/^[a-zA-Z]+$/)) {\r\n                formIsValid = false;\r\n                errors[\"name\"] = \"Only letters\";\r\n            }\r\n        }\r\n\r\n        if (!fields[\"email\"]) {\r\n            formIsValid = false;\r\n            errors[\"email\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (typeof fields[\"email\"] !== \"undefined\") {\r\n            let lastAtPos = fields[\"email\"].lastIndexOf('@');\r\n            let lastDotPos = fields[\"email\"].lastIndexOf('.');\r\n\r\n            if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') === -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\r\n                formIsValid = false;\r\n                errors[\"email\"] = \"Email is not valid\";\r\n            }\r\n        }\r\n\r\n        if (!fields[\"phone\"]) {\r\n            formIsValid = false;\r\n            errors[\"phone\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n        return formIsValid;\r\n    }\r\n\r\n    contactSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (this.handleValidation()) {\r\n            console.log(\"Form submitted\");\r\n        } else {\r\n            console.log(\"Form has errors.\")\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <form name=\"contactform\" className={classNames(\"form\", this.props.classes)}\r\n                      onSubmit={this.contactSubmit.bind(this)}>\r\n                    <h3 className=\"form__header\">Have a question about EHR Forms?</h3>\r\n                    <div className=\"form__caption\">\r\n                        Ask it here and we will get back to you as soon as we can\r\n                    </div>\r\n                    <div className=\"form__row\">\r\n                        <div className=\"form__col form__col-2\">\r\n                            <TextField name=\"name\"\r\n                                       placeholder=\"Name\"\r\n                                       required\r\n                                       onChange={this.handleChange.bind(this, \"name\")}\r\n                                       value={this.state.fields[\"name\"]}\r\n                                       error={this.state.errors[\"name\"]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form__row\">\r\n                        <div className=\"form__col form__col-2 is-nessesary\">\r\n                            <TextField name=\"email\"\r\n                                       placeholder=\"E-mail\"\r\n                                       required\r\n                                       onChange={this.handleChange.bind(this, \"email\")}\r\n                                       error={this.state.errors[\"email\"]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form__col form__col-2\">\r\n                            <TextField name=\"phone\"\r\n                                       placeholder=\"Phone\"\r\n                                       onChange={this.handleChange.bind(this, \"phone\")}\r\n                                       /*error={this.state.errors[\"phone\"]}*/\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form__row\">\r\n                        <div className=\"form__col\">\r\n                            <textarea className=\"textarea\"\r\n                                      placeholder=\"Message\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form__row\">\r\n                        <div className=\"form__col form__col_flex\">\r\n                            <button className=\"btn btn_primary\">Submit</button>\r\n                            <div className=\"form__legend\">* - Fields are required</div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import Form from \"./Form\";\r\nimport React, {Component} from \"react\";\r\n\r\nclass Modal extends Component {\r\n    onClose = e => {\r\n        this.props.onClose && this.props.onClose(e);\r\n    };\r\n    render() {\r\n        if(!this.props.show){\r\n            return null;\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"modal\" onClose={e => {\r\n                    this.onClose(e);\r\n                }}>\r\n                    <div className=\"modal__background\" onClick={this.onClose}/>\r\n                    <div className=\"modal__wrapper\">\r\n                        <div className=\"modal__close\" onClick={this.onClose}>\r\n                            <i className=\"material-icons md-36\">\r\n                                close\r\n                            </i>\r\n                        </div>\r\n                        <Form classes=\"light\"/>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nclass MenuItem extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.anchorTarget = null;\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.preventDefault();\r\n        window.scrollTo({top: this.props.itemPosition, left: 0, behavior:\"smooth\", block: \"start\"});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.anchorTarget = document.getElementById(this.props.itemName);\r\n    }\r\n    componentWillUnmount() {\r\n        this.anchorTarget = null;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <li className={classNames(\"menu__item\", this.props.active)}>\r\n                <a href={\"#\" + this.props.itemName} onClick={this.handleClick} aria-label={'Scroll to' + this.props.itemName}>\r\n                    {this.props.itemTitle}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuItem;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nfunction ButtonShowModal({onClick, visible}) {\r\n    return (\r\n        <div className={classNames(\"header__btn-wrap\", {\"is-visible\": visible})}>\r\n        <button className=\"btn btn_white header__btn\"\r\n                onClick={onClick}>\r\n            Request a demo\r\n        </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonShowModal;\r\n","import React, {Component} from \"react\";\r\nimport MenuItem from \"./MenuItem\";\r\nimport classNames from \"classnames\";\r\nimport ButtonShowModal from \"./ButtonShowModal\";\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleResize = this.handleResize.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n        this.menuToggle = this.menuToggle.bind(this);\r\n\r\n        this.sections = {\r\n                product: 'Product',\r\n                how: 'How it works',\r\n                features: 'Features',\r\n                contact: 'Contact'\r\n            };\r\n        this.state = {\r\n            activeMenuItem: {\r\n                top: null,\r\n                product: null,\r\n                how: null,\r\n                features: null,\r\n                contact: null\r\n            },\r\n            positions: {\r\n                product: '',\r\n                how: '',\r\n                features: '',\r\n                contact: ''\r\n            },\r\n            windowWidth: '',\r\n            menuVisible: false\r\n        };\r\n    }\r\n\r\n    handleResize() {\r\n        this.setState({windowWidth: window.innerWidth});\r\n        this.getAnchorPoints();\r\n    };\r\n\r\n    getAnchorPoints() {\r\n        const curScroll = window.pageYOffset || document.documentElement.scrollTop;\r\n        const headerHeight = document.querySelector('.header').offsetHeight;\r\n\r\n        let newPos = {};\r\n        for (let key in this.state.positions) {\r\n            newPos[key] = this.state.positions[key];\r\n        }\r\n        for (let key in newPos) {\r\n            newPos[key] = (document.getElementById(key).getBoundingClientRect().top + curScroll - headerHeight);\r\n        }\r\n        this.setState({positions: newPos});\r\n    }\r\n\r\n    handleScroll() {\r\n        const curPos = window.scrollY;\r\n        let curSection = null;\r\n\r\n        if(curPos > (this.state.positions.contact - 2)) {\r\n            curSection = 'contact';\r\n        } else if(curPos > (this.state.positions.features - 2)) {\r\n            curSection = 'features';\r\n        } else if(curPos > (this.state.positions.how - 2)) {\r\n            curSection = 'how';\r\n        } else if(curPos > (this.state.positions.product - 2)) {\r\n            curSection = 'product';\r\n        } else {\r\n            curSection = 'top';\r\n        }\r\n\r\n        if(this.state.activeMenuItem[curSection] !== \"active\") {\r\n\r\n            const newMenuState = {\r\n                top: '',\r\n                product: '',\r\n                how: '',\r\n                features: '',\r\n                contact: ''\r\n            };\r\n            newMenuState[curSection] = \"active\";\r\n            this.setState({ activeMenuItem: newMenuState });\r\n        }\r\n    }\r\n\r\n    handleClickOnLogo(e) {\r\n        e.preventDefault();\r\n        window.scrollTo({top: 0, left: 0, behavior:\"smooth\", block: \"start\"});\r\n    }\r\n\r\n    menuToggle() {\r\n        this.setState({menuVisible: !this.state.menuVisible});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAnchorPoints();\r\n        window.addEventListener('resize', this.handleResize);\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    render() {\r\n        const menuItems = [];\r\n        for (var key in this.sections) {\r\n            menuItems.push(<MenuItem itemName={key} itemTitle={this.sections[key]} itemPosition={this.state.positions[key]} active={this.state.activeMenuItem[key]}/>);\r\n        }\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"header__container\">\r\n                    <div className=\"logo\" onClick={ this.state.activeMenuItem.top !== 'active' ? this.handleClickOnLogo : null }>\r\n                        forms\r\n                    </div>\r\n                    <ul className={classNames(\"menu\", {\"is-visible\": this.state.menuVisible})}>\r\n                        {menuItems}\r\n                    </ul>\r\n                    <ButtonShowModal\r\n                        onClick={this.props.closeModal}\r\n                        visible={this.state.activeMenuItem.top !== 'active'}/>\r\n                    <i className=\"material-icons header__hamb\" onClick={this.menuToggle}>\r\n                        menu\r\n                    </i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Form from \"./Form\";\r\nimport Modal from \"./Modal\";\r\nimport Header from \"./Header\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            scrollFirstScreen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.scrollFirstScreenDetection = this.scrollFirstScreenDetection.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.scrollFirstScreenDetection = this.scrollFirstScreenDetection.bind(this));\r\n    }\r\n\r\n    scrollFirstScreenDetection() {\r\n        const FIRSTSCREENHEIGHT = 760;\r\n        this.setState({scrollFirstScreen: (window.pageYOffset > FIRSTSCREENHEIGHT)});\r\n    }\r\n\r\n    showModal = e => {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header\r\n                    closeModal={e => { this.showModal() }}\r\n                >\r\n                </Header>\r\n                <div className=\"section section1\">\r\n                    <div className=\"container section1__container\">\r\n                        <h1 className=\"section1__header\">Solution for building openEHR based applications fast</h1>\r\n                        <div className=\"section1__infogr\"/>\r\n                        <button className=\"btn btn_white\"\r\n                                onClick={e => {\r\n                                    this.showModal();\r\n                                }}>\r\n                            Request a demo\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <span id=\"product\"/>\r\n                <div className=\"section section2\">\r\n                    <div className=\"container section2__container\">\r\n                        <h2 className=\"section__header\">We solve the following problems</h2>\r\n\r\n                        <div className=\"blocks\">\r\n                            <div className=\"blocks__item\">\r\n                                <div className=\"blocks__top\">\r\n                                    Developing forms based on openEHR is really time consuming because of template\r\n                                    complicity – validation rules, bulky composition structure\r\n                                </div>\r\n                                <div className=\"blocks__bottom\">\r\n                                    WYSIWYG form builder is based on openEHR\r\n                                    <hr/>\r\n                                    Visual elements are loosely coupled with openEHR model via bindings\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"blocks__item\">\r\n                                <div className=\"blocks__top\">\r\n                                    Forms reflecting openEHR template structure are overloaded and it takes too much\r\n                                    time to\r\n                                    fill out to the clinician composition structure\r\n                                </div>\r\n                                <div className=\"blocks__bottom\">\r\n                                    Compact forms with easy to operate structure\r\n                                    <hr/>\r\n                                    Decision support when user interacts with user interface\r\n                                    <hr/>\r\n                                    Various ways to speed up filling of same blocks or dependent fields\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"blocks__item\">\r\n                                <div className=\"blocks__top\">\r\n                                    Low reusability of UI logic for similar archetypes in different forms and products\r\n                                </div>\r\n                                <div className=\"blocks__bottom\">\r\n                                    Reusable widgets for archetypes available in different forms\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"blocks__item\">\r\n                                <div className=\"blocks__top\">\r\n                                    Forms have to be built by frontend developers, with knowledge of openEHR\r\n                                    specification\r\n                                    in all its sophistication\r\n                                </div>\r\n                                <div className=\"blocks__bottom\">\r\n                                    Forms built for multiple openEHR compositions from different templates\r\n                                    <hr/>\r\n                                    Various purposes visual componenta libraries from third party developers\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"example\">\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <span id=\"how\"/>\r\n                <div className=\"section section3\">\r\n                    <div className=\"container\">\r\n                        <h2 className=\"section__header\">How it works</h2>\r\n                        <div className=\"blocks-arrows\">\r\n                            <div className=\"blocks-arrows__item\">\r\n                                <div className=\"blocks-arrows__arrow\">\r\n                                    1\r\n                                </div>\r\n                                Start by creating a form using your openEHR template(s)\r\n                            </div>\r\n                            <div className=\"blocks-arrows__item\">\r\n                                <div className=\"blocks-arrows__arrow\">\r\n                                    2\r\n                                </div>\r\n                                Customize it with any logic you need to meet UX requirements\r\n                            </div>\r\n                            <div className=\"blocks-arrows__item\">\r\n                                <div className=\"blocks-arrows__arrow\">\r\n                                    3\r\n                                </div>\r\n                                Swiftly integrate form into your end user application\r\n                            </div>\r\n                            <div className=\"blocks-arrows__item\">\r\n                                <div className=\"blocks-arrows__arrow\">\r\n                                    4\r\n                                </div>\r\n                                Save Compositions into your CDR\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <span id=\"features\"/>\r\n                <div className=\"section section4\">\r\n                    <div className=\"container\">\r\n                        <h2 className=\"section__header\">Key features</h2>\r\n                        <div className=\"columns\">\r\n                            <div className=\"columns__item\">\r\n                                <ul className=\"list-markered\">\r\n                                    <li className=\"list-markered__item\">Simple form building process with maximum\r\n                                        reusability and\r\n                                        versatility in the process, that is possible without deep knowledge of openEHR\r\n                                        specification\r\n                                    </li>\r\n                                    <li className=\"list-markered__item\">WYSIWYG UI building tool</li>\r\n                                    <li className=\"list-markered__item\">Flexible components loosely coupled with EHR\r\n                                        template\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"columns__item\">\r\n                                <ul className=\"list-markered\">\r\n                                    <li className=\"list-markered__item\">Rich component library with enough components to\r\n                                        build most\r\n                                        complicated forms\r\n                                    </li>\r\n                                    <li className=\"list-markered__item\">Most complicated components can be used - smart\r\n                                        user\r\n                                        assistan, 3D\r\n                                        elements, charts\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"section section5\">\r\n                    <div className=\"container section5__container\">\r\n                        <div className=\"columns-3\">\r\n                            <div className=\"columns-3__item\">\r\n                                <div className=\"columns-3__img columns-3__img_1\"/>\r\n                                <div className=\"columns-3__header\">10</div>\r\n                                <div className=\"columns-3__text\">\r\n                                    applications developed and upgraded using EHR Forms\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"columns-3__item\">\r\n                                <div className=\"columns-3__img columns-3__img_2\"/>\r\n                                <div className=\"columns-3__header\">200+</div>\r\n                                <div className=\"columns-3__text\">\r\n                                    Forms created\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"columns-3__item\">\r\n                                <div className=\"columns-3__img columns-3__img_3\"/>\r\n                                <div className=\"columns-3__header\">~30 000</div>\r\n                                <div className=\"columns-3__text\">\r\n                                    clinicians and medical specialists are using these forms every day\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <span id=\"contact\" name=\"contact\"/>\r\n                <div className=\"footer\">\r\n                    <div className=\"container footer__container\">\r\n                        <div className=\"copyright\">\r\n                            <span>Copyright 2020</span>\r\n                            <div className=\"logo-small\"/>\r\n                        </div>\r\n                        <Form/>\r\n                    </div>\r\n\r\n                </div>\r\n                <Modal onClose={this.showModal} show={this.state.show}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}